// NOTE This file is auto-generated by Contentlayer

import type { Markdown, MDX, ImageFieldData, IsoDateTimeString } from 'contentlayer/core'
import * as Local from 'contentlayer/source-files'

export { isType } from 'contentlayer/client'

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString }

/** Document types */
export type Doc = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Doc'
  /** Random ID to uniquely identify this doc, even after it moves */
  global_id: string
  /** The title of the page */
  title: string
  /** Override the title for display in nav */
  nav_title?: string | undefined
  label?: string | undefined
  excerpt: string
  show_child_cards: boolean
  collapsible: boolean
  collapsed: boolean
  /** MDX file body */
  body: MDX
  /** The URL path of this page relative to site root. For example, the site root page would be "/", and doc page would be "docs/getting-started/" */
  url_path: string
  /** The URL path of this page relative to site root. For example, the site root page would be "/", and doc page would be "docs/getting-started/" */
  url_path_without_id: string
  pathSegments: json
  headings: json
  last_edited: date
}

export type Example = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Example'
  /** The title of the page */
  title: string
  /** Override the title for display in nav */
  nav_title?: string | undefined
  label?: string | undefined
  excerpt: string
  /** The string to use in stackblitz.embedGithubProject. */
  github_repo?: string | undefined
  /** The file to open in the stackblitz playground. */
  open_file?: string | undefined
  /** MDX file body */
  body: MDX
  /** The URL path of this page relative to site root. For example, the site root page would be "/", and doc page would be "docs/getting-started/" */
  url_path: string
  pathSegments: json
  last_edited: date
}

export type GlobalConfig = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'GlobalConfig'
  /** The title of the site */
  title: string
  /** Markdown file body */
  body: Markdown

}

export type Post = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Post'
  /** The title of the post */
  title: string
  cover_image: CoverImage
  excerpt: string
  date: IsoDateTimeString
  authors: Author[]
  related_posts?: RelatedPost[] | undefined
  seo: SEO
  /** MDX file body */
  body: MDX
  /** The URL path of this page relative to site root. For example, the site root page would be "/", and doc page would be "docs/getting-started/" */
  url_path: string
  slug: string
  headings: json
}  

/** Nested types */
export type Author = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Author'
  name: string
  handle: string
  avatar: string

}

export type CoverImage = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'CoverImage'
  url: string
  alt: string
  width: number
  height: number

}

export type RelatedPost = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'RelatedPost'
  slug: string

}

export type SEO = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'SEO'
  title?: string | undefined
  description?: string | undefined
  imagePath: string

}  

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes
export type AllTypeNames = DocumentTypeNames | NestedTypeNames

export type DocumentTypes = Doc | Example | GlobalConfig | Post
export type DocumentTypeNames = 'Doc' | 'Example' | 'GlobalConfig' | 'Post'

export type NestedTypes = Author | CoverImage | RelatedPost | SEO
export type NestedTypeNames = 'Author' | 'CoverImage' | 'RelatedPost' | 'SEO'

export type DataExports = {
  allDocuments: DocumentTypes[]
  allDocs: Doc[]
  allExamples: Example[]
  globalConfig: GlobalConfig
  allPosts: Post[]
}


export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes
  documentTypeMap: DocumentTypeMap
  documentTypeNames: DocumentTypeNames
  nestedTypes: NestedTypes
  nestedTypeMap: NestedTypeMap
  nestedTypeNames: NestedTypeNames
  allTypeNames: AllTypeNames
  dataExports: DataExports
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  Doc: Doc
  Example: Example
  GlobalConfig: GlobalConfig
  Post: Post
}

export type NestedTypeMap = {
  Author: Author
  CoverImage: CoverImage
  RelatedPost: RelatedPost
  SEO: SEO
}

 