{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/contentlayer/index.ts", "../../../src/contentlayer/document/Doc.ts", "../../../src/contentlayer/utils.ts", "../../../src/contentlayer/document/GlobalConfig.ts", "../../../src/contentlayer/document/Post.ts", "../../../src/contentlayer/nested/SEO.ts", "../../../src/contentlayer/document/Example.ts"],
  "sourcesContent": ["// TODO remove eslint-disable when fixed https://github.com/import-js/eslint-plugin-import/issues/1810\n// eslint-disable-next-line import/no-unresolved\nimport { makeSource } from '@contentlayer/source-files'\nimport highlight from 'rehype-highlight'\nimport * as documentTypes from './src/contentlayer'\nimport { contentDirPath } from './src/contentlayer/utils'\nimport { validateDuplicateIds } from './src/utils/validate-duplicate-ids'\n\nexport default makeSource({\n  contentDirPath,\n  documentTypes,\n  mdx: { rehypePlugins: [highlight] },\n})\n", "export { Doc } from './document/Doc'\nexport { GlobalConfig } from './document/GlobalConfig'\nexport { Post } from './document/Post'\nexport { Example } from './document/Example'\n", "import { defineDocumentType } from '@contentlayer/source-files'\nimport type * as unified from 'unified'\nimport { toMarkdown } from 'mdast-util-to-markdown'\nimport { mdxToMarkdown } from 'mdast-util-mdx'\n\nimport { bundleMDX } from 'mdx-bundler'\n\n// import { SEO } from '../nested/SEO'\nimport { getLastEditedDate, urlFromFilePath } from '../utils'\n\nexport type DocHeading = { level: 1 | 2 | 3; title: string }\n\nexport const Doc = defineDocumentType(() => ({\n  name: 'Doc',\n  filePathPattern: `docs/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    global_id: {\n      type: 'string',\n      description: 'Random ID to uniquely identify this doc, even after it moves',\n      required: true,\n    },\n    title: {\n      type: 'string',\n      description: 'The title of the page',\n      required: true,\n    },\n    nav_title: {\n      type: 'string',\n      description: 'Override the title for display in nav',\n    },\n    label: {\n      type: 'string',\n    },\n    excerpt: {\n      type: 'string',\n      required: true,\n    },\n    show_child_cards: {\n      type: 'boolean',\n      default: false,\n    },\n    collapsible: {\n      type: 'boolean',\n      required: false,\n      default: false,\n    },\n    collapsed: {\n      type: 'boolean',\n      required: false,\n      default: false,\n    },\n    // seo: { type: 'nested', of: SEO },\n  },\n  computedFields: {\n    url_path: {\n      type: 'string',\n      description:\n        'The URL path of this page relative to site root. For example, the site root page would be \"/\", and doc page would be \"docs/getting-started/\"',\n      resolve: (doc) => {\n        if (doc._id.startsWith('docs/index.md')) return '/docs'\n        return urlFromFilePath(doc)\n      },\n    },\n    url_path_without_id: {\n      type: 'string',\n      description:\n        'The URL path of this page relative to site root. For example, the site root page would be \"/\", and doc page would be \"docs/getting-started/\"',\n      resolve: (doc) => urlFromFilePath(doc).replace(new RegExp(`-${doc.global_id}$`), ''),\n    },\n    pathSegments: {\n      type: 'json',\n      resolve: (doc) =>\n        urlFromFilePath(doc)\n          .split('/')\n          // skip `/docs` prefix\n          .slice(2)\n          .map((dirName) => {\n            const re = /^((\\d+)-)?(.*)$/\n            const [, , orderStr, pathName] = dirName.match(re) ?? []\n            const order = orderStr ? parseInt(orderStr) : 0\n            return { order, pathName }\n          }),\n    },\n    headings: {\n      type: 'json',\n      resolve: async (doc) => {\n        const headings: DocHeading[] = []\n\n        await bundleMDX({\n          source: doc.body.raw,\n          mdxOptions: (opts) => {\n            opts.remarkPlugins = [...(opts.remarkPlugins ?? []), tocPlugin(headings)]\n            return opts\n          },\n        })\n\n        return [{ level: 1, title: doc.title }, ...headings]\n      },\n    },\n    last_edited: { type: 'date', resolve: getLastEditedDate },\n  },\n  extensions: {},\n}))\n\nconst tocPlugin =\n  (headings: DocHeading[]): unified.Plugin =>\n  () => {\n    return (node: any) => {\n      for (const element of node.children.filter((_: any) => _.type === 'heading' || _.name === 'OptionsTable')) {\n        if (element.type === 'heading') {\n          const title = toMarkdown({ type: 'paragraph', children: element.children }, { extensions: [mdxToMarkdown()] })\n            .trim()\n            .replace(/<.*$/g, '')\n            .replace(/\\\\/g, '')\n            .trim()\n          headings.push({ level: element.depth, title })\n        } else if (element.name === 'OptionsTable') {\n          element.children\n            .filter((_: any) => _.name === 'OptionTitle')\n            .forEach((optionTitle: any) => {\n              optionTitle.children\n                .filter((_: any) => _.type === 'heading')\n                .forEach((heading: any) => {\n                  const title = toMarkdown(\n                    { type: 'paragraph', children: heading.children },\n                    { extensions: [mdxToMarkdown()] },\n                  )\n                    .trim()\n                    .replace(/<.*$/g, '')\n                    .replace(/\\\\/g, '')\n                    .trim()\n                  headings.push({ level: heading.depth, title })\n                })\n            })\n        }\n      }\n    }\n  }\n", "import type { DocumentGen } from 'contentlayer/core'\nimport * as fs from 'node:fs/promises'\nimport path from 'node:path'\n\nexport const contentDirPath = 'content'\n\nexport const urlFromFilePath = (doc: DocumentGen): string => {\n  let urlPath = doc._raw.flattenedPath.replace(/^pages\\/?/, '/')\n  if (!urlPath.startsWith('/')) urlPath = `/${urlPath}`\n  if ('global_id' in doc) urlPath += `-${doc.global_id}`\n  // Remove preceding indexes from path segments\n  urlPath = urlPath\n    .split('/')\n    .map((segment: string) => segment.replace(/^\\d\\d\\d\\-/, ''))\n    .join('/')\n  return urlPath\n}\n\nexport const getLastEditedDate = async (doc: DocumentGen): Promise<Date> => {\n  const stats = await fs.stat(path.join(contentDirPath, doc._raw.sourceFilePath))\n  return stats.mtime\n}\n", "import { defineDocumentType } from '@contentlayer/source-files'\n\nexport const GlobalConfig = defineDocumentType(() => ({\n  name: 'GlobalConfig',\n  filePathPattern: `config/global.yaml`,\n  isSingleton: true,\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the site',\n      required: true,\n    },\n  },\n  extensions: {},\n}))\n", "import { defineDocumentType, defineNestedType } from '@contentlayer/source-files'\nimport type * as unified from 'unified'\nimport { mdxToMarkdown } from 'mdast-util-mdx'\nimport { toMarkdown } from 'mdast-util-to-markdown'\nimport { bundleMDX } from 'mdx-bundler'\nimport { urlFromFilePath } from '../utils'\nimport { SEO } from '../nested/SEO'\n\ntype PostHeading = { level: 1 | 2 | 3; title: string }\n\nconst RelatedPost = defineNestedType(() => ({\n  name: 'RelatedPost',\n  fields: {\n    slug: { type: 'string', required: true },\n  },\n}))\n\nconst CoverImage = defineNestedType(() => ({\n  name: 'CoverImage',\n  fields: {\n    url: { type: 'string', required: true },\n    alt: { type: 'string', required: true },\n    width: { type: 'number', required: true },\n    height: { type: 'number', required: true },\n  },\n}))\n\nconst Author = defineNestedType(() => ({\n  name: 'Author',\n  fields: {\n    name: { type: 'string', required: true },\n    handle: { type: 'string', required: true },\n    avatar: { type: 'string', required: true },\n  },\n}))\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `blog/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true,\n    },\n    cover_image: {\n      type: 'nested',\n      of: CoverImage,\n      required: true,\n    },\n    excerpt: {\n      type: 'string',\n      required: true,\n    },\n    date: {\n      type: 'date',\n      required: true,\n    },\n    authors: {\n      type: 'list',\n      of: Author,\n      required: true,\n    },\n    related_posts: {\n      type: 'list',\n      of: RelatedPost,\n      required: false,\n    },\n    seo: {\n      type: 'nested',\n      of: SEO,\n      required: true,\n    },\n  },\n  computedFields: {\n    url_path: {\n      type: 'string',\n      description:\n        'The URL path of this page relative to site root. For example, the site root page would be \"/\", and doc page would be \"docs/getting-started/\"',\n      resolve: urlFromFilePath,\n    },\n    slug: {\n      type: 'string',\n      resolve: (post) => urlFromFilePath(post).replace(/^\\/blog\\//, ''),\n    },\n    headings: {\n      type: 'json',\n      resolve: async (doc) => {\n        const headings: PostHeading[] = []\n\n        await bundleMDX({\n          source: doc.body.raw,\n          mdxOptions: (opts) => {\n            opts.remarkPlugins = [...(opts.remarkPlugins ?? []), tocPlugin(headings)]\n            return opts\n          },\n        })\n\n        return [{ level: 1, title: doc.title }, ...headings]\n      },\n    },\n  },\n  extensions: {},\n}))\n\nconst tocPlugin =\n  (headings: PostHeading[]): unified.Plugin =>\n  () => {\n    return (node: any) => {\n      node.children\n        .filter((_: any) => _.type === 'heading')\n        .forEach((heading: any) => {\n          const title = toMarkdown({ type: 'paragraph', children: heading.children }, { extensions: [mdxToMarkdown()] })\n            .trim()\n            // removes MDX in headlines\n            .replace(/<.*$/g, '')\n            // remove backslashes (e.g. from list items)\n            .replace(/\\\\/g, '')\n            .trim()\n\n          return headings.push({ level: heading.depth, title })\n        })\n    }\n  }\n", "import { defineNestedType } from 'contentlayer/source-files'\n\nexport const SEO = defineNestedType(() => ({\n  name: 'SEO',\n  fields: {\n    title: {\n      type: 'string',\n    },\n    description: {\n      type: 'string',\n    },\n    imagePath: {\n      type: 'string',\n      required: true,\n    },\n  },\n  extensions: {},\n}))\n", "import { defineDocumentType } from '@contentlayer/source-files'\nimport { getLastEditedDate, urlFromFilePath } from '../utils'\n\nexport const Example = defineDocumentType(() => ({\n  name: 'Example',\n  filePathPattern: `examples/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the page',\n      required: true,\n    },\n    nav_title: {\n      type: 'string',\n      description: 'Override the title for display in nav',\n    },\n    label: {\n      type: 'string',\n    },\n    excerpt: {\n      type: 'string',\n      required: true,\n    },\n    github_repo: {\n      type: 'string',\n      description: 'The string to use in stackblitz.embedGithubProject.',\n      required: false,\n    },\n    open_file: {\n      type: 'string',\n      description: 'The file to open in the stackblitz playground.',\n      required: false,\n    },\n  },\n  computedFields: {\n    url_path: {\n      type: 'string',\n      description:\n        'The URL path of this page relative to site root. For example, the site root page would be \"/\", and doc page would be \"docs/getting-started/\"',\n      resolve: urlFromFilePath,\n    },\n    pathSegments: {\n      type: 'json',\n      resolve: (doc) =>\n        doc._raw.flattenedPath.split('/').map((dirName) => {\n          const re = /^((\\d+)-)?(.*)$/\n          const [, , orderStr, pathName] = dirName.match(re) ?? []\n          const order = orderStr ? parseInt(orderStr) : 0\n          return { order, pathName }\n        }),\n    },\n    last_edited: { type: 'date', resolve: getLastEditedDate },\n  },\n  extensions: {},\n}))\n"],
  "mappings": "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",
  "names": ["defineDocumentType", "defineDocumentType", "defineNestedType", "mdxToMarkdown", "toMarkdown", "bundleMDX", "defineNestedType", "defineDocumentType", "bundleMDX", "tocPlugin", "toMarkdown", "mdxToMarkdown", "defineDocumentType", "defineDocumentType"]
}
